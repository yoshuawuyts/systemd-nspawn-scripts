#!/bin/sh

set -e

id="$(id -u)"
if [ "$id" -ne 0 ]; then
  echo "This script uses functionality which requires root privileges"
  exit 1
fi

if [ $# -lt 1 ]; then
  echo "Usage: $0 <git-url>"
  exit 1
fi

# Set file references
# __filename="$(readlink -f "$0")"
# __dirname="$(dirname "$__filename")"

clean_uri () {
  echo "$1" \
    | sed 's|^https://github.com/||' \
    | tr '/' ' ' \
    | awk '{print $1 "/" $2}'
}

# Prepare variables
cleaned_uri="$(clean_uri "$1")"
# user="$(echo "$cleaned_uri" | sed 's|/.*||')"
REPO="$(echo "$cleaned_uri" | sed 's|.*/||')"
uri="https://git@github.com/${cleaned_uri}.git"

# Clone directory
tmpdir="$(mktemp -d "/tmp/${REPO}-XXX")"
git clone --depth=1 "$uri" "$tmpdir"

# Configuration
VERSION="$(jq -r .version < "${tmpdir}/package.json")"
NAME="${REPO}-${VERSION}"
OUTDIR="${HOME}/images"
NODE_VERSION="6"

# Create directories
mkdir -p "$OUTDIR"

# Start acbuild, clean up on exit
acbuild begin "docker://mhart/alpine-node:${NODE_VERSION}"
trap '{ export EXT=$?; acbuild end && exit $EXT; }' EXIT

# Build
acbuild --debug set-name "$NAME"
acbuild --debug run -- apk update
acbuild --debug copy-to-dir "$tmpdir"/* /var/www/
acbuild --debug run -- npm install --production --prefix=/var/www
acbuild --debug environment add PORT 80
acbuild --debug port add http tcp 80
acbuild --debug set-exec -- /usr/bin/node /var/www/index.js
acbuild --debug write --overwrite "${OUTDIR}/${NAME}.aci"

# Clean up
rm -rf "$tmpdir"

echo "Created ${OUTDIR}/${NAME}.aci"
